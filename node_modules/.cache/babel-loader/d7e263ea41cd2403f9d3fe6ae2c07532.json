{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { DefaultPageSize } from '../constants/global.constants';\nimport { unsplashAPI } from \"../api/unsplash.api\";\nconst initialState = {\n  list: [],\n  search: '',\n  currentPage: 1,\n  currentSize: DefaultPageSize,\n  allCount: 0,\n  error: null,\n  loading: false\n};\nexport const fetchPhotos = createAsyncThunk('photos/fetchPhotos', async (anyData, {\n  rejectWithValue,\n  getState\n}) => {\n  try {\n    const {\n      photos\n    } = getState();\n    const {\n      search,\n      currentSize,\n      currentPage\n    } = photos;\n    const params = {\n      page: currentPage,\n      per_page: currentSize,\n      client_id: process.env.REACT_APP_UNSPLASH_ACCESS_KEY || '',\n      query: search\n    };\n    return await unsplashAPI.fetchPhotos(params);\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const setSearch = createAsyncThunk('photos/setSearch', async (search, {\n  rejectWithValue,\n  dispatch,\n  getState\n}) => {\n  try {\n    const {\n      photos\n    } = getState();\n    const {\n      search: currentSearchValue\n    } = photos;\n\n    if (currentSearchValue === search) {\n      return;\n    }\n\n    dispatch(setSearchAC(search));\n    dispatch(fetchPhotos());\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\nexport const setPage = createAsyncThunk('photos/setPage', async (currentPage, {\n  rejectWithValue,\n  dispatch\n}) => {\n  try {\n    dispatch(setPageAC(currentPage));\n    dispatch(fetchPhotos());\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\nconst photosSlice = createSlice({\n  name: 'photos',\n  initialState,\n  reducers: {\n    setPhotos(state, action) {\n      state.list = action.payload.list;\n    },\n\n    setSearchAC(state, action) {\n      state.search = action.payload;\n    },\n\n    setPageAC(state, action) {\n      state.currentPage = action.payload;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPhotos.fulfilled, (state, action) => {\n      const {\n        total,\n        results\n      } = action.payload;\n      state.list = results;\n      state.allCount = total;\n      state.loading = false;\n    });\n    builder.addCase(fetchPhotos.rejected, (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    });\n    builder.addCase(fetchPhotos.pending, (state, action) => {\n      state.loading = true;\n    });\n  }\n});\nexport const photosReducer = photosSlice.reducer;\nexport const {\n  setSearchAC,\n  setPageAC\n} = photosSlice.actions;","map":{"version":3,"sources":["/Users/softarex-093/Documents/unsplash/src/reducers/photos.reducer.ts"],"names":["createAsyncThunk","createSlice","DefaultPageSize","unsplashAPI","initialState","list","search","currentPage","currentSize","allCount","error","loading","fetchPhotos","anyData","rejectWithValue","getState","photos","params","page","per_page","client_id","process","env","REACT_APP_UNSPLASH_ACCESS_KEY","query","message","setSearch","dispatch","currentSearchValue","setSearchAC","setPage","setPageAC","photosSlice","name","reducers","setPhotos","state","action","payload","extraReducers","builder","addCase","fulfilled","total","results","rejected","pending","photosReducer","reducer","actions"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {DefaultPageSize} from '../constants/global.constants';\nimport {IFetchPhotosQuery, IGetPhotosResponse, IPhotoInfo} from \"../interfaces/unsplash.interface\";\nimport {AppStateType} from './store';\nimport {unsplashAPI} from \"../api/unsplash.api\";\n\nexport type InitialState = {\n    list: IPhotoInfo[],\n    search: string,\n    currentPage: number,\n    currentSize: number,\n    allCount: number;\n    error: string | null\n    loading: boolean\n}\n\nconst initialState: InitialState = {\n    list: [],\n    search: '',\n    currentPage: 1,\n    currentSize: DefaultPageSize,\n    allCount: 0,\n    error: null,\n    loading: false\n};\n\nexport const fetchPhotos = createAsyncThunk(\n    'photos/fetchPhotos',\n    async (anyData, {rejectWithValue, getState}): Promise<IGetPhotosResponse | Error> => {\n        try {\n            const {photos} = getState() as AppStateType;\n            const {search, currentSize, currentPage} = photos;\n\n            const params: IFetchPhotosQuery = {\n                page: currentPage,\n                per_page: currentSize,\n                client_id: process.env.REACT_APP_UNSPLASH_ACCESS_KEY || '',\n                query: search,\n            }\n\n            return await unsplashAPI.fetchPhotos(params)\n        } catch (error) {\n            return rejectWithValue(error.message)\n        }\n    }\n)\n\nexport const setSearch = createAsyncThunk(\n    'photos/setSearch',\n    async (search: string, {rejectWithValue, dispatch, getState}) => {\n        try {\n            const {photos} = getState() as AppStateType;\n            const {search: currentSearchValue} = photos;\n\n            if(currentSearchValue === search){\n                return;\n            }\n\n            dispatch(setSearchAC(search))\n            dispatch(fetchPhotos())\n        } catch (error) {\n            return rejectWithValue(error)\n        }\n    }\n)\n\nexport const setPage = createAsyncThunk(\n    'photos/setPage',\n    async (currentPage: number, {rejectWithValue, dispatch}) => {\n        try {\n            dispatch(setPageAC(currentPage))\n            dispatch(fetchPhotos())\n        } catch (error) {\n            return rejectWithValue(error)\n        }\n    }\n)\n\nconst photosSlice = createSlice({\n    name: 'photos',\n    initialState,\n    reducers: {\n        setPhotos(state: InitialState, action: PayloadAction<{ list: IPhotoInfo[] }>) {\n            state.list = action.payload.list;\n        },\n        setSearchAC(state: InitialState, action: PayloadAction<string>) {\n            state.search = action.payload;\n        },\n        setPageAC(state: InitialState, action: PayloadAction<number>) {\n            state.currentPage = action.payload;\n        },\n    },\n    extraReducers: builder => {\n        builder.addCase(fetchPhotos.fulfilled, (state, action) => {\n            const {total, results} = action.payload as IGetPhotosResponse\n\n            state.list = results;\n            state.allCount = total;\n            state.loading = false;\n        })\n        builder.addCase(fetchPhotos.rejected, (state, action) => {\n            state.error = action.payload as string;\n            state.loading = false;\n        })\n        builder.addCase(fetchPhotos.pending, (state, action) => {\n            state.loading = true;\n        })\n    }\n});\n\nexport const photosReducer = photosSlice.reducer;\nexport const {setSearchAC, setPageAC} = photosSlice.actions;"]},"metadata":{},"sourceType":"module"}